{"version":3,"file":"static/js/565.038f56a7.chunk.js","mappings":"mTAEMA,EAAW,+BACXC,EAAM,mCAECC,EAAa,mCAAG,oGACJC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFjB,cACrBG,EADqB,yBAIpBA,EAASC,MAJW,2CAAH,qDAObC,EAAgB,mCAAG,WAAMC,GAAN,uFACPJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBAC4BM,IAFrB,cACxBH,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,sDAOhBG,EAAiB,mCAAG,WAAMC,GAAN,uFACRN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAS,EADA,oBACmBR,IAFX,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBK,EAAiB,mCAAG,WAAMD,GAAN,uFACRN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAS,EADA,4BAC2BR,IAFnB,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBM,EAAiB,mCAAG,WAAMF,GAAN,uFACRN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAS,EADA,4BAC2BR,IAFnB,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,qD,iLC/BjBO,EAAWC,EAAAA,EAAAA,GAAH,0JAURC,EAAQD,EAAAA,EAAAA,IAAH,yCAILE,EAAOF,EAAAA,EAAAA,EAAH,yDAKJG,EAAgBH,EAAAA,EAAAA,GAAH,sB,SC6C1B,EA5Da,WACX,OAA4BI,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQd,GAAYe,EAAAA,EAAAA,MAAZf,QAsBR,OApBAgB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAAS,mCAAG,2FAChBL,GAAa,GADG,mBAGSb,EAAAA,EAAAA,IAAkBD,GAH3B,OAGRL,EAHQ,OAIde,EAAUf,EAASyB,MAJL,gDAMdR,EAAS,KAAMS,SAND,yBAQdP,GAAa,GARC,4EAAH,qDAaf,OADAK,IACO,WACLF,EAAWK,OACZ,CACF,GAAE,CAACtB,KAGF,iCACE,iCACCW,GAASY,MAAM,wCAAD,OAAyCZ,EAAMU,WAC5DZ,GAAU,YAEXA,IACC,SAACN,EAAD,UACGM,EAAOe,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACrC,OACE,UAACrB,EAAD,WACGoB,GACC,SAACtB,EAAD,CACEwB,IAAG,yCAAoCF,GACvCG,IAAKJ,KAGP,SAACrB,EAAD,CACEwB,IAAI,sEACJC,IAAKJ,KAGT,SAACpB,EAAD,UAAOoB,KACP,UAACpB,EAAD,yBAAkBsB,OAbAH,EAgBvB,MAGJZ,IAAa,SAACkB,EAAA,EAAD,MAGnB,C","sources":["fetchMovies.jsx","pages/Cast/Cast.styled.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '19cb12c7db03612dca0520f8299f982f';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchSearchMovie = async searchQuery => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return response.data;\n};\n","import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n  justify-content: center;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nexport const Image = styled.img`\n  width: 150px;\n`;\n\nexport const Text = styled.p`\n  margin: 5px;\n  width: 150px;\n`;\n\nexport const CastContainer = styled.li``;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { fetchMovieCredits } from '../../fetchMovies';\nimport { CastList, Image, CastContainer, Text } from './Cast.styled';\n\nconst Cast = () => {\n  const [actors, setActors] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const fetchCast = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetchMovieCredits(movieId);\n        setActors(response.cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCast();\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      <h2>Cast</h2>\n      {error && alert(`Sorry, but something happened wrong: ${error.message}`)}\n      {!actors && 'No actors'}\n\n      {actors && (\n        <CastList>\n          {actors.map(({ id, name, profile_path, character }) => {\n            return (\n              <CastContainer key={id}>\n                {profile_path ? (\n                  <Image\n                    src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                    alt={name}\n                  />\n                ) : (\n                  <Image\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/a/ac/Default_pfp.jpg\"\n                    alt={name}\n                  />\n                )}\n                <Text>{name}</Text>\n                <Text>Character: {character}</Text>\n              </CastContainer>\n            );\n          })}\n        </CastList>\n      )}\n      {isLoading && <Loader />}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["BASE_URL","KEY","fetchTrending","axios","response","data","fetchSearchMovie","searchQuery","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","CastList","styled","Image","Text","CastContainer","useState","actors","setActors","error","setError","isLoading","setIsLoading","useParams","useEffect","controller","AbortController","fetchCast","cast","message","abort","alert","map","id","name","profile_path","character","src","alt","Loader"],"sourceRoot":""}