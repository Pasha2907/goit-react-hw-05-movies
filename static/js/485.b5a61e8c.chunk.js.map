{"version":3,"file":"static/js/485.b5a61e8c.chunk.js","mappings":"sNAGaA,EAAYC,EAAAA,EAAAA,GAAH,8FAOTC,GAAYD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,gL,SCNTG,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACvBC,GAAWC,EAAAA,EAAAA,MAajB,OAAO,SAACP,EAAD,UAAYK,EAXjBA,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACT,yBACE,SAACR,EAAD,CACES,GAAE,kBAAaF,GACfG,MAAO,CAAEC,KAAK,GAAD,OAAKP,EAASQ,UAAd,OAAyBR,EAASS,SAFjD,SAIGL,KALID,EADA,IAWiC,MAC/C,C,mMCjBKO,EAAW,+BACXC,EAAM,mCAECC,EAAa,mCAAG,oGACJC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFjB,cACrBG,EADqB,yBAIpBA,EAASC,MAJW,2CAAH,qDAObC,EAAgB,mCAAG,WAAMC,GAAN,uFACPJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBAC4BM,IAFrB,cACxBH,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,sDAOhBG,EAAiB,mCAAG,WAAMC,GAAN,uFACRN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAS,EADA,oBACmBR,IAFX,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBK,EAAiB,mCAAG,WAAMD,GAAN,uFACRN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAS,EADA,4BAC2BR,IAFnB,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBM,EAAiB,mCAAG,WAAMF,GAAN,uFACRN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAS,EADA,4BAC2BR,IAFnB,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,qD,uLC/BjBO,EAAU3B,EAAAA,EAAAA,IAAH,+CAIP4B,EAAY5B,EAAAA,EAAAA,GAAH,+C,SC6CtB,EA5Ca,WACX,OAA4B6B,EAAAA,EAAAA,UAAS,IAArC,eAAOzB,EAAP,KAAe0B,EAAf,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KACM7B,GAAWC,EAAAA,EAAAA,MAsBjB,OApBA6B,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAAU,mCAAG,2FACjBJ,GAAa,GADI,mBAGQjB,EAAAA,EAAAA,MAHR,OAGTE,EAHS,OAIfW,EAAUX,EAASoB,SAJJ,gDAMfP,EAAS,KAAMQ,SANA,yBAQfN,GAAa,GARE,4EAAH,qDAahB,OADAI,IACO,WACLF,EAAWK,OACZ,CACF,GAAE,KAGD,gCACGV,GAASW,MAAM,wCAAD,OAAyCX,EAAMS,WAC9D,UAACb,EAAD,YACE,SAACC,EAAD,8BAEE,SAACzB,EAAA,EAAD,CACEC,OAAQA,EACRM,GAAE,kBAAaN,EAAOI,IACtBG,MAAO,CAAEC,KAAMP,EAASQ,YAG3BoB,IAAa,SAACU,EAAA,EAAD,SAIrB,C","sources":["components/MovieGallery/MovieGallery.styled.jsx","components/MovieGallery/MovieGallery.jsx","fetchMovies.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const MovieList = styled.ol`\n  margin: 0;\n  padding: 0;\n  font-weight: 500;\n  font-size: 22px;\n`;\n\nexport const MovieItem = styled(NavLink)`\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n  :hover,\n  :focus {\n    color: #3f51b5;\n  }\n  &.active {\n    color: #3f51b5;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { MovieItem, MovieList } from './MovieGallery.styled';\n\nexport const MovieGallery = ({ movies }) => {\n  const location = useLocation();\n  const renderGallery = () =>\n    movies.map(({ id, title }) => (\n      <li key={id}>\n        <MovieItem\n          to={`/movies/${id}`}\n          state={{ from: `${location.pathname}${location.search}` }}\n        >\n          {title}\n        </MovieItem>\n      </li>\n    ));\n\n  return <MovieList>{movies ? renderGallery() : null}</MovieList>;\n};\n\nMovieGallery.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n};\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '19cb12c7db03612dca0520f8299f982f';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchSearchMovie = async searchQuery => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return response.data;\n};\n","import styled from '@emotion/styled';\n\nexport const Section = styled.div`\n  padding: 20px 80px;\n`;\n\nexport const MainTitle = styled.h1`\n  text-align: center;\n`;\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { fetchTrending } from '../../fetchMovies';\nimport { MovieGallery } from '../../components/MovieGallery/MovieGallery';\nimport { Loader } from 'components/Loader/Loader';\nimport { Section, MainTitle } from './Home.styled';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const renderFilm = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetchTrending();\n        setMovies(response.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    renderFilm();\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  return (\n    <>\n      {error && alert(`Sorry, but something happened wrong: ${error.message}`)}\n      <Section>\n        <MainTitle>Trending today</MainTitle>\n        {\n          <MovieGallery\n            movies={movies}\n            to={`/movies/${movies.id}`}\n            state={{ from: location.pathname }}\n          />\n        }\n        {isLoading && <Loader />}\n      </Section>\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["MovieList","styled","MovieItem","NavLink","MovieGallery","movies","location","useLocation","map","id","title","to","state","from","pathname","search","BASE_URL","KEY","fetchTrending","axios","response","data","fetchSearchMovie","searchQuery","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","Section","MainTitle","useState","setMovies","error","setError","isLoading","setIsLoading","useEffect","controller","AbortController","renderFilm","results","message","abort","alert","Loader"],"sourceRoot":""}