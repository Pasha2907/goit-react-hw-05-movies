{"version":3,"file":"static/js/499.a80e71bb.chunk.js","mappings":"mTAEMA,EAAW,+BACXC,EAAM,mCAECC,EAAa,mCAAG,oGACJC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFjB,cACrBG,EADqB,yBAIpBA,EAASC,MAJW,2CAAH,qDAObC,EAAgB,mCAAG,WAAMC,GAAN,uFACPJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBAC4BM,IAFrB,cACxBH,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,sDAOhBG,EAAiB,mCAAG,WAAMC,GAAN,uFACRN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAS,EADA,oBACmBR,IAFX,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBK,EAAiB,mCAAG,WAAMD,GAAN,uFACRN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAS,EADA,4BAC2BR,IAFnB,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBM,EAAiB,mCAAG,WAAMF,GAAN,uFACRN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAS,EADA,4BAC2BR,IAFnB,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,qD,+KC/BjBO,EAAWC,EAAAA,EAAAA,GAAH,4DAKRC,EAAaD,EAAAA,EAAAA,EAAH,iEAKVE,EAAUF,EAAAA,EAAAA,EAAH,mF,SCgDpB,EAtDgB,WACd,OAA8BG,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQb,GAAYc,EAAAA,EAAAA,MAAZd,QAsBR,OApBAe,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAAY,mCAAG,2FACnBL,GAAa,GADM,mBAGMX,EAAAA,EAAAA,IAAkBF,GAHxB,OAGXL,EAHW,OAIjBc,EAAWd,EAASwB,SAJH,gDAMjBR,EAAS,KAAMS,SANE,yBAQjBP,GAAa,GARI,4EAAH,qDAalB,OADAK,IACO,WACLF,EAAWK,OACZ,CACF,GAAE,CAACrB,KAGF,iCACE,oCACCY,IAAa,SAACU,EAAA,EAAD,IACbZ,GAASa,MAAM,wCAAD,OAAyCb,EAAMU,UAE7DZ,IACC,SAACL,EAAD,UACGK,EAAQgB,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,wBACGD,GACC,iCACE,UAACrB,EAAD,sBAAqBqB,MACrB,SAACpB,EAAD,UAAUqB,OAGZ,4CAPKF,EAWZ,QAKV,C","sources":["fetchMovies.jsx","pages/Reviews/Reviews.styled.jsx","pages/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '19cb12c7db03612dca0520f8299f982f';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchSearchMovie = async searchQuery => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return response.data;\n};\n","import styled from '@emotion/styled';\n\nexport const Addition = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nexport const AuthorName = styled.p`\n  font-weight: 500;\n  font-size: 25px;\n`;\n\nexport const Content = styled.p`\n  font-weight: 400;\n  font-size: 18px;\n  padding: 10px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from '../../components/Loader/Loader';\nimport { fetchMovieReviews } from '../../fetchMovies';\nimport { Addition, AuthorName, Content } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const fetchReviews = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetchMovieReviews(movieId);\n        setReviews(response.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchReviews();\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      <h2>Reviews</h2>\n      {isLoading && <Loader />}\n      {error && alert(`Sorry, but something happened wrong: ${error.message}`)}\n\n      {reviews && (\n        <Addition>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                {author ? (\n                  <>\n                    <AuthorName>Author: {author}</AuthorName>\n                    <Content>{content}</Content>\n                  </>\n                ) : (\n                  \"We don't hane any reviews for this movie\"\n                )}\n              </li>\n            );\n          })}\n        </Addition>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["BASE_URL","KEY","fetchTrending","axios","response","data","fetchSearchMovie","searchQuery","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","Addition","styled","AuthorName","Content","useState","reviews","setReviews","error","setError","isLoading","setIsLoading","useParams","useEffect","controller","AbortController","fetchReviews","results","message","abort","Loader","alert","map","id","author","content"],"sourceRoot":""}